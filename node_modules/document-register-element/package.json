{
  "_args": [
    [
      {
        "raw": "document-register-element@^1.5.0",
        "scope": null,
        "escapedName": "document-register-element",
        "name": "document-register-element",
        "rawSpec": "^1.5.0",
        "spec": ">=1.5.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\kpace\\Documents\\sandbox\\vue\\vue-component\\node_modules\\vue-custom-element"
    ]
  ],
  "_from": "document-register-element@>=1.5.0 <2.0.0",
  "_id": "document-register-element@1.7.0",
  "_inCache": true,
  "_location": "/document-register-element",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/document-register-element-1.7.0.tgz_1501713173982_0.9617554119322449"
  },
  "_npmUser": {
    "name": "webreflection",
    "email": "andrea.giammarchi@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "document-register-element@^1.5.0",
    "scope": null,
    "escapedName": "document-register-element",
    "name": "document-register-element",
    "rawSpec": "^1.5.0",
    "spec": ">=1.5.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/vue-custom-element"
  ],
  "_resolved": "http://registry.npmjs.org/document-register-element/-/document-register-element-1.7.0.tgz",
  "_shasum": "d971b62755294b94fcd658b1d8533b0366c852e9",
  "_shrinkwrap": null,
  "_spec": "document-register-element@^1.5.0",
  "_where": "C:\\Users\\kpace\\Documents\\sandbox\\vue\\vue-component\\node_modules\\vue-custom-element",
  "author": {
    "name": "Andrea Giammarchi",
    "url": "http://webreflection.blogspot.com/"
  },
  "browser": "./build/document-register-element.js",
  "bugs": {
    "url": "https://github.com/WebReflection/document-register-element/issues"
  },
  "dependencies": {},
  "description": "A stand-alone working lightweight version of the W3C Custom Elements specification",
  "devDependencies": {
    "html-class": "^1.2.0",
    "jshint": "^2.9.5",
    "phantomjs-prebuilt": "^2.1.14",
    "tiny-cdn": "^0.7.0",
    "uglify-js": "^1.3.5",
    "wru": "^0.3.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-qAoWcNm1zW3LVO0KSblYISM0oLQzlNtns2gd1O/YS3QvFYFidG6lF73fC98fIbfPQkws698L0/URrtmN8+ADbQ==",
    "shasum": "d971b62755294b94fcd658b1d8533b0366c852e9",
    "tarball": "https://registry.npmjs.org/document-register-element/-/document-register-element-1.7.0.tgz"
  },
  "gitHead": "4c75e5d54f1c419e444e66b25ba783e83b679eb9",
  "homepage": "https://github.com/WebReflection/document-register-element",
  "keywords": [
    "Web",
    "Components",
    "Custom",
    "Element",
    "Elements",
    "DOM",
    "W3C",
    "Polymer",
    "polyfill",
    "alternative"
  ],
  "license": "MIT",
  "main": "./build/document-register-element.node.js",
  "maintainers": [
    {
      "name": "webreflection",
      "email": "andrea.giammarchi@gmail.com"
    }
  ],
  "name": "document-register-element",
  "optionalDependencies": {},
  "readme": "document-register-element\n\n[![build status](https://travis-ci.org/WebReflection/document-register-element.svg)](https://travis-ci.org/WebReflection/document-register-element) [![donate](https://img.shields.io/badge/$-donate-ff69b4.svg?maxAge=2592000&style=flat)](https://github.com/WebReflection/donate)\n=========================\n\nA stand-alone lightweight version of [Custom Elements V1](https://html.spec.whatwg.org/multipage/scripting.html#custom-elements)\nbased on top, and compatible with, the battle-tested [Custom Elements V0](http://w3c.github.io/webcomponents/spec/custom/),\nalready used in production with projects such [Google AMP HTML âš¡](https://github.com/ampproject/amphtml#amp-html-) and others.\n\n### Avoiding CE Built In\nSince version `1.6` the **ponyfill** flag can be either a `string`,\nrepresenting the ponyfill `type` such `\"auto\"` or `\"force\"`,\nor an `object`, with the following shape:\n```js\ninstallCE(global, {\n  type: 'force' || 'auto' (default),\n  noBuiltIn: true (default undefined / false)\n});\n```\n\nIf you specify `noBuiltIn` property as true,\nthe `V1` API will be polyfilled where needed,\nbut no extra checks and patches will be applied\nto make custom elements built-in working,\nsince no browser is currently shipping\n[this part of the specification](https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example).\n\n\n### New Ponyfill in 1.3\nAs discussed in issue #86 there is currently no way to require\ndocument-register-element polyfill without automatic\nfeature detection and possible global context pollution.\n\nSince there could be some very specific case when the browser\nshould be force-patched, the `pony` version of the module\nwill not attempt to feature detect anything and it will only\nenrich the environment once invoked.\n\n```js\nconst installCE = require('document-register-element/pony');\n\n// by default, the second argument is 'auto'\n// but it could be also 'force'\n// which ignores feature detection and force\n// the polyfill version of CustomElements\ninstallCE(global, 'force');\n```\n\n\n# What's new in Custom Elements v1\nThe ability to extend by simply defining classes:\n```js\n// create a class with custom methods\n// overrides, special behavior\nclass MyGreetings extends HTMLElement {\n  show() {\n    alert(this.textContent);\n  }\n}\n\n// define it in the CustomElementRegistry\ncustomElements.define('my-greetings', MyGreetings);\n```\n\nIt is also possible to extend native components, as written in specs.\n```js\n// extends some different native constructor\nclass MyButton extends HTMLButtonElement {}\n\n// define it specifying what's extending\ncustomElements.define('my-button', MyButton, {extends: 'button'});\n\n// <button is=\"my-button\">click me</button>\ndocument.body.appendChild(\n  new MyButton\n).textContent = 'click me';\n```\n\nSpecial methods are also slightly different from v0:\n\n  * the `constructor` is invoked instead of the `createdCallback` one\n  * `connectedCallback` is the new `attachedCallback`\n  * `disconnectedCallback` is the new `detachedCallback`\n  * `attributeChangedCallback` is sensitive to the public static list of attributes to be notified about\n\n```js\nclass MyDom extends HTMLElement {\n  static get observedAttributes() {\n    return ['country'];\n  }\n  attributeChangedCallback(name, oldValue, newValue) {\n    // react to changes for name\n    alert(name + ':' + newValue);\n  }\n}\ncustomElements.define('my-dom', MyDom);\nvar md = new MyDom();\nmd.setAttribute('test', 'nope');\nmd.setAttribute('country', 'UK'); // country: UK\n```\n\n\n# V1 Caveat\nThe current standard cannot possibly be polifilled \"*1:1*\" with vanilla JavaScript because procedurally created instances need an upgrade.\nIf the `constructor` is needed to setup nodes, there are two solutions:\n\n### Upgrading the `constructor` context\n```js\nclass MyElement extends HTMLElement {\n  // the self argument might be provided or not\n  // in both cases, the mandatory `super()` call\n  // will return the right context/instance to use\n  // and eventually return\n  constructor(self) {\n    self = super(self);\n    self.addEventListener('click', console.log);\n    // important in case you create instances procedurally:\n    // var me = new MyElement();\n    return self;\n  }\n}\n```\n\n\n### Skipping the caveat through `extends`\n```js\n// base class to extend, same trick as before\nclass HTMLCustomElement extends HTMLElement {\n  constructor(_) { return (_ = super(_)).init(), _; }\n  init() { /* override as you like */ }\n}\n\n// create any other class inheriting HTMLCustomElement\nclass MyElement extends HTMLCustomElement {\n  init() {\n    // just use `this` as regular\n    this.addEventListener('click', console.log);\n    // no need to return it\n  }\n}\n```\n\n\n#### Inherited V0 Caveats\nPlease keep in mind old gotchas with [innerHTML](https://github.com/WebReflection/document-register-element#using-innerhtml) or [other caveats](https://github.com/WebReflection/document-register-element#common-issues--caveat) are still valid.\n\n\n### How\n\n`npm install document-register-element` will put [build/document-register-element.js](build/document-register-element.js) inside `node_modules/document-register-element/` of your project.\n\nIf you're working with a tool like Browserify, Webpack, RequireJS, etc, you can\nimport the script at some point before you need to use the API.\n\n```js\nimport 'document-register-element' // ES2015\n// or\nrequire('document-register-element') // CommonJS\n// or\ndefine(['document-register-element'], function() {}) // AMD\n```\n\nIf you're not using a module system, just place\n`node_modules/document-register-element/build/document-register-element.js`\nsomewhere where it will be served by your server, then put\n\n```html\n<script src=\"/path/to/document-register-element.js\"></script>\n```\n\nin your head element and you should be good to go.\n\n\n#### via CDN\nMany thanks to [cdnjs](http://www.cdnjs.com) for hosting this script. Following an example on how to include it.\n```html\n<script\n  src=\"//cdnjs.cloudflare.com/ajax/libs/document-register-element/1.5.0/document-register-element.js\"\n>/* W3C Custom Elements */</script>\n```\n\n\n### Tested On\n\nThe [live test page](http://webreflection.github.io/document-register-element/test/) is here, containing all tests as listed in [the test file](test/document-register-element.js).\n\nThe following list of **desktop** browsers has been successfully tested:\n\n  * Chrome\n  * Firefox\n  * IE 8 or greater (please read [about IE8](https://github.com/WebReflection/document-register-element#about-ie8) caveats)\n  * Safari\n  * Opera\n\nThe following list of **mobile** OS has been successfully tested:\n\n  * iOS 5.1 or greater\n  * Android 2.2 or greater\n  * FirefoxOS 1.1 or greater\n  * KindleFire 3 or greater\n  * Windows Phone 7 or greater\n  * Opera Mobile 12 or greater\n  * Blackberry OS 7* and OS 10\n  * webOS 2 or LG TV\n  * Samsung Bada OS 2 or greater\n  * NOKIA Asha with Express Browser\n\nThe good old [BB OS 7](http://us.blackberry.com/software/smartphones/blackberry-7-os.html) is the only one failing the test with `className` which is not notified as `attributeChanged` when it's changed. This means BB OS 7 will also fail with `id`, however changing `id` at runtime has never been a common or useful pattern.\n\n\n### TL;DR does it work ?\nIf you [see the first clock ticking](http://webreflection.github.io/document-register-element/test/examples/x-clock.html), the TL;DR answer is yes.\n\n\n### V0 Usage Example\n\nA basic HTML example page\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>testing my-element</title>\n  <script src=\"js/document-register-element.js\"></script>\n  <script src=\"js/my-element.js\"></script>\n</head>\n<body>\n  <my-element>\n    some content\n  </my-element>\n</body>\n```\n\nwith the following `my-element.js` content\n```javascript\nvar MyElement = document.registerElement(\n  'my-element',\n  {\n    prototype: Object.create(\n      HTMLElement.prototype, {\n      createdCallback: {value: function() {\n        console.log('here I am ^_^ ');\n        console.log('with content: ', this.textContent);\n      }},\n      attachedCallback: {value: function() {\n        console.log('live on DOM ;-) ');\n      }},\n      detachedCallback: {value: function() {\n        console.log('leaving the DOM :-( )');\n      }},\n      attributeChangedCallback: {value: function(\n        name, previousValue, value\n      ) {\n        if (previousValue == null) {\n          console.log(\n            'got a new attribute ', name,\n            ' with value ', value\n          );\n        } else if (value == null) {\n          console.log(\n            'somebody removed ', name,\n            ' its value was ', previousValue\n          );\n        } else {\n          console.log(\n            name,\n            ' changed from ', previousValue,\n            ' to ', value\n          );\n        }\n      }}\n    })\n  }\n);\n```\n\n\n### Why\nI wrote a [couple](http://webreflection.blogspot.co.uk/2014/07/a-w3c-custom-elements-alternative.html) of blog [posts](http://webreflection.blogspot.co.uk/2015/03/bringing-custom-elements-to-ie8.html) about this polyfill, and here's the quick summary:\n\n* [document-register-element.js](build/document-register-element.js) is a stand alone polyfill which aims to support as many browsers as possible, without requiring extra dependencies at all, all in about **5KB** minified and gzipped.\n\nAdd if you want the [dom4](https://github.com/WebReflection/dom4#dom4) normalizer, and you'll find yourself in a modern DOM environment that works reliably with today's browsers, with an eye always open on performance.\n### Common Issues + Caveat\nHere a list of gotchas you might encounter when developing *CustomElement* components.\n\n#### HTML{TABLE|ROW|INPUT|SELECT|others...}Element\nAs described in [issue 6](https://github.com/WebReflection/document-register-element/issues/6) it's not possible to fully inherit a table, input, select, or other special element behaviors.\n```js\n// This will NOT work as expected\ndocument.registerElement(\n  'my-input',\n  {\n    prototype: Object.create(\n      HTMLInputElement.prototype\n    )\n  }\n);\n\nvar mi = document.createElement('my-input');\n```\n\nThe correct way to properly implement a custom input that will be also backward compatible is the following one:\n```js\n// This will NOT work as expected\ndocument.registerElement(\n  'my-input',\n  {\n    extends: 'input', // <== IMPORTANT\n    prototype: Object.create(\n      HTMLInputElement.prototype\n    )\n  }\n);\n\n// how to create the input\nvar mi = document.createElement(\n  'input',    // the extend\n  'my-input'  // the enriched custom definition\n);\n```\n\nAnother approach is to use just a basic `HTMLElement` component and initialize its content at runtime.\n```js\ndocument.registerElement(\n  'my-input',\n  {\n    prototype: Object.create(\n      HTMLElement.prototype,\n      {\n        createdCallback: {value: function () {\n          // here the input\n          this.el = this.appendChild(\n            document.createElement('input')\n          );\n        }}\n      }\n    )\n  }\n);\n\nvar mi = document.createElement('my-input');\n```\nIn this case every method that wants to interact with the input will refer `this.el` instead of just `this`.\n\n\n#### Using `innerHTML`\nIn order to avoid huge performance impact, native behavior overwrite problems and incompatibilities, there is now a [helper script](https://github.com/WebReflection/document-register-element/blob/master/build/innerHTML.max.js),\nwhich aim is to make **off-line custom elements creation** possible using template strings instead of needing manual `document.createElement` replacements.\n\nThe helper is a simple `innerHTML` function that returns the given node, after setting `innerHTML` and, in case the polyfill is used, initialize nodes.\n\nThis helper is needed in order to be aligned with native implementations, but please remember that `createdCallback` could be asynchronous, even if triggered ASAP after injecting HTML through this function.\n\n\n#### Changing the `style` property\n\nIf you change the style property via `node.style.cssText` or `node.style.backgroundColor = \"red\"` this change will most likely reflect through `node.getAttribute(\"style\")`.\n\nIn order to prevent footguns inside `attributeChangedCallback` invocations causing potential stack overflows, the `style` property has been filtered starting from version `0.1.1`, also reflecting current native implementation where changing this special property won't invoke the callback.\n\n(yes, even using `node.setAttribute(\"style\", \"value\")` that you shouldn't ... just use `node.style.cssText = \"value\"` instead)\n\n\n#### About IE8\n\nStarting from version `0.2.0` there is an experimental support for IE8.\nThere is a specific file that needs to be loaded in IE8 only upfront, plus a sequence of polyfills\nthat will be simply ignored by every browser but downloaded in IE8.\n\nPlease check [base.html file](examples/base.html) in order to have a basic model to reuse in case you want to support IE8.\n\nAll tests pass and there is a [map component example](http://webreflection.github.io/document-register-element/test/examples/x-map.html) that already works in IE8 too.\n\nRemember there are few things to consider when IE8 is a target but since it didn't cost many bytes\nto have it in, I've decided to merge the logic and maintain only one file that will work in IE8 too.\n\n\n#### IE8 caveats\n\n  * it's IE8\n  * all operations are batched and eventually executed ASAP but asynchronously. This behavior is closer to native Mutation Observers but might have some extra glitch in rendering time\n  * `className` is right now the only special attribute that reacts. Others might be implemented in the [dre-ie8-upfront-fix.js](src/dre-ie8-upfront-fix.js) file.\n  * in order to have node reacting to attributes changes, these must be live on the DOM\n  * if you are using `extends` when create a custom element, remember to minify the production code or wrap such reserved word in quotes\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/WebReflection/document-register-element.git"
  },
  "scripts": {
    "test": "phantomjs testrunner.js",
    "web": "tiny-cdn run -p=1337"
  },
  "version": "1.7.0"
}
